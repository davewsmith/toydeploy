---
- hosts: all
  become: true

  vars:
    github_account: davewsmith
    app_name: toydeploy
    app_dir: '/home/{{ ansible_user }}/{{ app_name }}'

  tasks:

    - name: Show gathered facts.
      debug:
        var: ansible_facts
      when: false

    - name: Who we are on the client.
      debug:
        msg: "{{ ansible_user }}@{{ ansible_facts.hostname }} on {{ ansible_facts.lsb.description }}"

    - name: Get free disk space.
      command:
        cmd: df -h
      register: df
      changed_when: false

    - name: Show free disk space.
      debug: var=df.stdout_lines

    - name: Update apt cache.
      apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Install platform dependencies.
      apt:
        name: '{{ item }}'
        state: present
      with_items:
        - python3-pip
        - python-virtualenv
        - git

    - name: Clone the source respository.
      become: false
      git:
        repo: 'https://github.com/{{ github_account }}/{{ app_name }}.git'
        dest: '{{ app_name }}'
        version: HEAD  # noqa git-latest
        depth: 1

    - name: Ensure .env is rendered
      become: false
      template:
        src: dotenv.j2
        dest: '{{ app_dir }}/.env'
        mode: 0400

    - name: Install app requirements.
      become: false
      pip:
        # venv is in .gitignore
        virtualenv: '{{ app_dir }}/venv'
        virtualenv_python: python3
        requirements: '{{ app_dir }}/requirements.txt'

    - name: Ensure the database directory is present
      become: false
      file:
        path: '{{ app_dir }}/data'
        state: directory
        mode: 0700

    - name: Run database migrations
      become: false
      command:
        chdir: '{{ app_dir }}'
        cmd: venv/bin/flask db upgrade
      environment:
        FLASK_APP: wsgi
      changed_when: false

    - name: Ensure uwsgi directories are present.
      file:
        path: '{{ item }}'
        state: directory
        owner: '{{ ansible_user }}'
        group: '{{ ansible_user }}'
        mode: 0755
      with_items:
        - /etc/uwsgi
        - /etc/uwsgi/apps-available
        - /etc/uwsgi/apps-enabled
        - /var/log/uwsgi

    - name: Set up log rotation for uwsgi.
      debug: msg="todo template for /etc/logrotate.d/uwsgi"

    - name: Ensure uwsgi app config is present.
      become: false
      template:
        src: uwsgi_app.ini.j2
        dest: /etc/uwsgi/apps-available/uwsgi_app.ini
        mode: 0644

    - name: Ensure uwsgi app config is enabled.
      become: false
      file:
        src: /etc/uwsgi/apps-available/uwsgi_app.ini
        path: /etc/uwsgi/apps-enabled/uwsgi_app.ini
        state: link

    - name: Ensure uwsgi service is present.
      template:
        src: uwsgi.service.j2
        dest: /etc/systemd/system/uwsgi.service
        mode: 0644

    - name: Restart uwsgi service.
      systemd:
        name: uwsgi
        daemon_reload: true
        # enabled: true
        state: started

    - name: Ensure nginx is present.
      apt:
        name: nginx
        state: present

    - name: Ensure default nginx configuration is removed.
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Ensure nginx config for app is present.
      template:
        src: app.j2
        dest: /etc/nginx/sites-available/app
        mode: 0644

    - name: Enable nginx config for app is enabled.
      file:
        src: /etc/nginx/sites-available/app
        path: /etc/nginx/sites-enabled/app
        state: link

    # TODO make this a handler
    - name: Restart nginx.
      systemd:
        name: nginx
        state: restarted

